<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:broker="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Embedded ActiveMQ JMS broker server -->
    <broker:broker useJmx="true" persistent="false"
                   brokerName="localhost" useShutdownHook="false">
        <broker:transportConnectors>
            <broker:transportConnector name="tcp"
                                       uri="tcp://localhost:61610"/>
        </broker:transportConnectors>
    </broker:broker>
    <broker:connectionFactory id="jmsFactory"
                              brokerURL="vm://localhost"/>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="transacted" value="true"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="brokerURL" value="tcp://localhost:61610"/>
    </bean>

    <!-- Wrapper for a TemplateProducer -->
    <bean id="producer" class="events.camel.Producer">
        <constructor-arg ref="producer.template"/>
    </bean>

    <camel:camelContext id="camel.demo.service">

        <camel:template defaultEndpoint="direct:producer"
                        id="producer.template"/>
        <camel:routeBuilder ref="dynamicDeleteOrNotRouteBuilder"/>

        <!-- send to direct component, pass to seda consumer -->
        <camel:route>
            <camel:from uri="direct:producer"/>
            <camel:to uri="seda:consumer"/>
        </camel:route>
        <camel:route>
            <camel:from uri="seda:consumer"/>
            <!-- Due to seda runs in other thread -->
            <camel:bean ref="stockService" method="consumeAndUpdate"/>
        </camel:route>
        <camel:route>
            <camel:from uri="activemq:queue:itemQ"/>
            <camel:transacted/>
            <camel:bean ref="stockService" method="consumeAndUpdate"/>
        </camel:route>
        <camel:route>
            <camel:from uri="jms:topic:moreConsumers"/>
            <camel:bean ref="stockService" method="consumeAndUpdate"/>
        </camel:route>
        <camel:route>
            <camel:from uri="jms:topic:moreConsumers"/>
            <camel:bean ref="anotherStockService" method="consume"/>
        </camel:route>
        <!-- Send a message to consumers that should vote if it is OK to delete
           the item -->
        <camel:route>
            <camel:from uri="seda:deleteVotersDeny?multipleConsumers=true"/>
            <camel:bean ref="denyVoter"/>
            <camel:to uri="seda:deleteAggregator"/>
        </camel:route>
        <camel:route>
            <camel:from uri="seda:deleteVotersDeny?multipleConsumers=true"/>
            <camel:bean ref="acceptVoter1"/>
            <camel:to uri="seda:deleteAggregator"/>
        </camel:route>
        <camel:route>
            <camel:from uri="seda:deleteVotersAccept?multipleConsumers=true"/>
            <camel:bean ref="acceptVoter1"/>
            <camel:to uri="seda:deleteAggregator"/>
        </camel:route>
        <camel:route>
            <camel:from uri="seda:deleteVotersAccept?multipleConsumers=true"/>
            <camel:bean ref="acceptVoter2"/>
            <camel:to uri="seda:deleteAggregator"/>
        </camel:route>
        <camel:route>
            <camel:from uri="seda:deleteAggregator"/>
            <camel:aggregate strategyRef="deleteVoterAggregator"
                             completionTimeout="1000">
                <camel:correlationExpression>
                    <camel:header>itemId</camel:header>
                </camel:correlationExpression>
                <camel:bean ref="deleteDecission"/>
            </camel:aggregate>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:deleteOrNotStaticFalse"/>
            <camel:multicast parallelProcessing="true" strategyRef="deleteVoterAggregator" timeout="1000">
                <camel:bean ref="denyVoter"/>
                <camel:bean ref="acceptVoter1"/>
                <camel:bean ref="acceptVoter2"/>
            </camel:multicast>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:deleteOrNotStaticTrue"/>
            <camel:multicast parallelProcessing="true" strategyRef="deleteVoterAggregator" timeout="1000">
                <camel:bean ref="acceptVoter1"/>
                <camel:bean ref="acceptVoter2"/>
            </camel:multicast>
        </camel:route>


    </camel:camelContext>

    <bean id="dynamicDeleteOrNotRouteBuilder" class="events.camel.DeleteOrNotRouteBuilder"/>

    <!-- Voter consumers for deleting item -->
    <bean id="acceptVoter1" class="events.camel.services.ItemDeleteVoter">
        <constructor-arg value="true"/>
    </bean>
    <bean id="acceptVoter2" class="events.camel.services.ItemDeleteVoter">
        <constructor-arg value="true"/>
    </bean>
    <bean id="denyVoter" class="events.camel.services.ItemDeleteVoter">
        <constructor-arg value="false"/>
    </bean>
    <bean id="deleteVoterAggregator" class="events.camel.services.DeleteVoterAggregator"/>
    <bean id="deleteDecission" class="events.camel.services.DeleteVoterDecission"
          scope="prototype">
        <constructor-arg ref="stockService"/>
    </bean>

    <bean id="stockService" class="events.camel.services.StockServiceImpl">
        <constructor-arg ref="stockRepository"/>
        <constructor-arg ref="producer"/>
        <constructor-arg ref="producer.template"/>
    </bean>
    <bean id="anotherStockService" class="events.camel.services.StockServiceImpl">
        <constructor-arg ref="stockRepository"/>
        <constructor-arg ref="producer"/>
        <constructor-arg ref="producer.template"/>
    </bean>
</beans>
